#ifndef ENTRAINEUR_HPP
#define ENTRAINEUR_HPP

#include "pokemon.hpp"
#include <vector>
#include <string>
#include <memory>

// Classe de base représentant un entraîneur de Pokémon
class Entraineur {
protected:
    std::string nom;
    std::vector<Pokemon*> equipe;
    int indexPokemonActif;

public:
    explicit Entraineur(const std::string& nom);
    virtual ~Entraineur();

    void ajouterPokemon(Pokemon* nouveau);
    Pokemon* pokemonActif() const;
    bool touteEquipeKO() const;
    void selectionnerPokemon(int nouvelIndex);
    void soignerEquipe();                        // ✅ Ajouté pour V5
    virtual void afficherEquipe() const;
};

// Classe représentant un joueur humain
class Joueur : public Entraineur {
private:
    int nombreBadges;
    int totalVictoires;
    int totalDefaites;

public:
    explicit Joueur(const std::string& nom);

    void incrementerBadge();
    void enregistrerVictoire();
    void enregistrerDefaite();
    std::string getRank() const;                // ✅ Ajouté pour V5
    void afficherStats() const;
};

// Classe représentant un leader de gymnase
class LeaderGym : public Entraineur {
private:
    std::string nomGym;
    std::string recompenseMedaille;

public:
    LeaderGym(const std::string& nom, const std::string& gym, const std::string& medaille);
};

// Classe représentant le maître Pokémon
class MaitrePokemon : public Entraineur {
public:
    explicit MaitrePokemon(const std::string& nom);
    int appliquerBonusDegats(int degatsDeBase) const;
};

#endif
